//
//  ApiClientTest.swift
//  OmprakashTripathi-WalETests
//
//  Created by Om Prakash Tripathi on 05/11/22.
//

import XCTest

import XCTest
@testable import OmprakashTripathi_WalE
import SwiftUI

class ApiClientTest: XCTestCase {

    private var mocConfigurationManager: ConfigurationManager!
    private var mockSession: MockUrlSession!
    private var sut: ApiClient!
    private var url: URL!
    private var mockFileManager: MockFileCacheManager!

    override func setUp() {
        super.setUp()
        mocConfigurationManager = ConfigurationManager()
        let sessionConfig = URLSessionConfiguration.default
        url = mocConfigurationManager.baseUrl() ?? URL(string: "test")
        mockFileManager = MockFileCacheManager()
    
        let response = HTTPURLResponse(url: url,
                                       statusCode: 200,
                                       httpVersion: "1.0",
                                       headerFields: nil)
        mockSession = mockUrlSession(config: sessionConfig,
                                     responseData: try? responseData(responseString()),
                                     response: response, error: nil)
        sut = ApiClient(configManager: mocConfigurationManager,
                        session: mockSession,
                        fileManager: mockFileManager)
    }

    override func tearDown() {
        mocConfigurationManager = nil
        mockSession = nil
        url = nil
        mockFileManager = nil
        sut = nil
        super.tearDown()
    }
    
    func testGetDataFromAPI() {
        let expectation = expectation(description: "tesHetDataFromAPI")

        var responseModel: NasaImageOfTheDayModel?
        sut.getDataFromAPI { recivedModel in
            responseModel = recivedModel
            expectation.fulfill()
        }
        waitForExpectations(timeout: 10.0)
        
        XCTAssertNotNil(responseModel)
        XCTAssertEqual(responseModel?.date, "2022-11-04")
        XCTAssertEqual(responseModel?.title, "InSight's Final Selfie")
    }
    
    func testDownload() {
        let expectation = expectation(description: "loadImageData")
        mockFileManager.mockTemporaryDirectory = URL(fileURLWithPath: "")
        let mockUrl = URL(fileURLWithPath: "tempImage.jpeg")
        var errorResponse: Error?
      
        sut.loadImageData(urlSting: mockUrl.absoluteString) { data, error in
            errorResponse = error
            expectation.fulfill()

        }
        waitForExpectations(timeout: 10.0)
    
        XCTAssertNil(errorResponse)
    }
    
    private func responseString() -> [String: Any] {
        [
            "date": "2022-11-04",
            "explanation": "The Mars InSight lander returned its first image from the Red Planet's flat, equatorial Elysium Planitia after a successful touchdown on November 26, 2018. The history making mission to explore the martian Interior using Seismic investigations, geodesy, and heat transport has been operating for over 1,400 martian days or sols. In that time the InSight mission has detected more than 1,300 marsquakes and recorded data from Mars-shaking meteoroid impacts, observing how the seismic waves travel to provide a glimpse inside Mars. Analyzing the archive of data collected is expected to yield discoveries for decades. But InSight's final operational sol is likely not far off. The reason is evident in this selfie recorded earlier this year showing its deck and large, 2-meter-wide solar panels covered with dust. Kicked up by martian winds the dust continues to accumulate and drastically reduce the power that can be generated by InSight's solar panels.",
            "hdurl": "https://apod.nasa.gov/apod/image/2211/PIA25287_insight.jpg",
            "media_type": "image",
            "service_version": "v1",
            "title": "InSight's Final Selfie",
            "url": "https://apod.nasa.gov/apod/image/2211/PIA25287_insight1024.jpg"
        ]
    }
    
    private func responseData(_ responseJson: [String: Any]) throws -> Data {
        let jsonData = try JSONSerialization.data(withJSONObject: responseJson,
                                                  options: JSONSerialization.WritingOptions()) as Data
        return jsonData
    }

    func mockUrlSession(config: URLSessionConfiguration,
        responseData: Data? = nil,
                            response: URLResponse? = nil,
                            error: Error? = nil) -> MockUrlSession? {
            let session = MockUrlSession(configuration: config)
            session.responseData = responseData
            session.response = response
            session.error = error
            return session
    }
}
